query {
  allMovies {
    id
    title
    year
  }
}

# nie trzeba w nowej lini - wystarczą spacje
query {
  allMovies {title year}
}

############## QUERY PARAMS ##############
# film o id równym 1

query {
  movie(id:1) {
    title
    year
  }
}

query {
  movie(id:1) {
    id
    title
    year
  }
}

# trzbea podwójny cudzysłów do stringów
query {
  movie(title:"Titanic") {
    title
    year
  }
}


############################
dynamiczne dodatkowe dane nie z bazy

query {
  allMovies{
    id
    title
    year
    movieAge
  }
}


########################
multiple models

query {
  allMovies{
    id
    title
    year
    movieAge
    director {
      id
      name
      surname
    }
  }
}

#pojedynczy film
query {
  movie(id:4){
    id
    title
    year
    movieAge
    director {
      id
      name
      surname
    }
  }
}


# inny model
query {

  allDirectors{
    id
    name
    surname
  }
}


##############################################
query {
  movie(id:1){
    id
    title
    director{
      name
      surname
    }
  }
  movie(id:2){
    title
    id
    director{
      name
      surname
    }
  }
}

# Zwórić błąd, bo movies to jak funkcja anonimowa -konflikt nazw
{
  "errors": [
    {
      "message": "Fields \"movie\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.",
      "locations": [
        {
          "line": 2,
          "column": 3
        },
        {
          "line": 10,
          "column": 3
        }
      ]
    }
  ]
}

#### ALIAS
#rozwiązanie - aliasy (ale nadmiarowy kod)
query {
  firstMovie: movie(id:1){
    id
    title
    director{
      name
      surname
    }
  }
  secondMovie: movie(id:2){
    title
    id
    director{
      name
      surname
    }
  }
}



#### FRAGMENT
##... wypakowuje
query {
  firstMovie: movie(id:1){
    ...movieData
  }
  secondMovie: movie(id:2){
		...movieData
  }
}

fragment movieData on MovieType{
    id
    title
    director{
      name
      surname
    }
}

# dodawanie nazwy do Query jest dobrą praktyką do debugoowania i czytelności
# można dizelić na mniejsze query
query MoviesAndDirectors{
 allMovies{
    title
    year
  	director{
    	surname
  	}
  }
}

query JustMovies{
 allMovies{
    title
    year
  }
}


# variables
query MovieAndDirector($id:Int) {
 movie(id: $id){
  	id
    title
    year
  	director{
    	surname
  	}
  }
}


# okn Query Variables
{
  "id":2
}





----------------------------
# @include
query MovieAndDirector($id:Int, $showdirector: Boolean=false) {
 movie(id: $id){
  	id
    title
    year
  	director @include(if: $showdirector){
    	surname
  	}
  }
}

{
  "id":4,
  "showdirector": true
}

# @skip na odwrót nie wyświetla gdy warunek prawdziwy
query MovieAndDirector($id:Int, $showdirector: Boolean=false) {
 movie(id: $id){
  	id
    title
    year
  	director @skip(if: $showdirector){
    	surname
  	}
  }
}



######################################################################################
######################################################################################
###################  MUTACJE  ########################

##############createMutation
#nowa mutacja
mutation {
  createMovie(title:"Test", year:2002){
    movie{
      id
      title
      year
    }
  }
}

#jak jest mutacja i quwry to trzeba je nazwac
# interfejs pozwala wybrać którą uruchomić (czy quey czy mutation)
mutation CreateMovie{
  createMovie(title:"Test", year:2002){
    movie{
      id
      title
      year
    }
  }
}

query AllMovies{
  allMovies{
    id
    title
    year
  }
}


########## Update mutation
mutation UpdateMovie{
  updateMovie(id:5, title:"Test2", year:1990){
    movie{
      id
      title
      year
    }
  }
}